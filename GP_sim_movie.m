% Make a movie of GP_sim simple result
addpath gp_tools

% Get first inv(K) matrix
X_train = X_train_full(1:50,:,1);
W_train = W_train_full(1:50,:,1);
[max_lift, energy_index] = min(W_train(:,3));
max_lift_old = max_lift;


Ki = GP_predict(X_train, W_train, [], cov_funs{1}, loghyper);
[WW_grid, VW_grid] = GP_predict(X_train, W_train, ...
	[x_grid(:), y_grid(:), z_grid(:)], cov_funs{1}, loghyper, Ki);
U_grid = reshape(WW_grid(:,1), size(x_grid));
V_grid = reshape(WW_grid(:,2), size(x_grid));
W_grid = reshape(WW_grid(:,3), size(x_grid));
VW_grid = reshape(VW_grid, size(x_grid));
scale = sqrt(max(sum(WW_grid.^2, 2)))/max_wind*0.4;

current_pos = start_pos;	current_att = start_att;	current_V = V0;
old_pos = start_pos;		old_att = start_att;		old_V = V0;
current_E = E0;
energy_target = [X_train(energy_index, [1,2])'; current_pos(3)-50];


%% FIGURE SETUP
h_fig2 = figure(2); clf; 
set(h_fig2, 'Position', [760, 100, fig_width, fig_height]);
h_fig = figure(1); clf;
set(h_fig, 'Position', [100, 100, fig_width, fig_height]);
set(gca, 'Zdir', 'reverse'); set(gca, 'Ydir', 'reverse'); axis equal;
% h_plane = SBXC_handle(X0, PLANE_AERO);
view(3); hold on;
colours = [1 0.6 0.6; 0.6 1 0.6; 0.6 0.6 1; 1 0.6 1; 1 1 0.6; 0.6 1 1];
xlabel('X'); ylabel('Y'); zlabel('Z');

h_box = plot3(x_limits([1,2,2,1,1,1,2,2,1,1,1,1,2,2,2,2]), ...
			  y_limits([1,1,1,1,1,2,2,2,2,2,2,1,1,2,2,1]), ...
			  z_limits([1,1,2,2,1,1,1,2,2,1,2,2,2,2,1,1]), ...
			  'Color', [.8, .8, .8], 'LineStyle', '--');
h_target = plot3(target_pos(1), target_pos(2), target_pos(3), 'ro', ...
	'Color', [0.8,0,0], 'MarkerSize', 10, 'LineWidth', 2);
h_start = plot3(start_pos(1), start_pos(2), start_pos(3), 'g^', 'Color',...
	 [0,.5,0],'MarkerSize', 10, 'LineWidth', 2);
h_energy_target = plot3(energy_target(1), energy_target(2), ...
	energy_target(3), 'x','Color', [0.5,0.5,1], 'MarkerSize', 10);
h_info_target = plot3(info_target(1), info_target(2), ...
	info_target(3), 'bx','Color', [1,0.5,0], 'MarkerSize', 10);

h_train = plot3(X_train(:,1), X_train(:,2), X_train(:,3), 'r+', 'MarkerSize', 3);

h_windcone = coneplot(x_grid, y_grid, z_grid, U_grid, V_grid, W_grid, ...
	x_grid, y_grid, z_grid, scale, VW_grid);
set(h_windcone, 'EdgeColor', 'none')


%%

for i = 1:n_replan
	
	Ki = GP_predict(X_train, W_train, [], cov_funs{1}, loghyper);
	
	[WW_grid, VW_grid] = GP_predict(X_train, W_train, ...
		[x_grid(:), y_grid(:), z_grid(:)], cov_funs{1}, loghyper, Ki);
	U_grid = reshape(WW_grid(:,1), size(x_grid));
	V_grid = reshape(WW_grid(:,2), size(x_grid));
	W_grid = reshape(WW_grid(:,3), size(x_grid));
	VW_grid = reshape(VW_grid, size(x_grid));
	delete(h_windcone); scale = sqrt(max(sum(WW_grid.^2, 2)))/max_wind*0.4;
	h_windcone = coneplot(x_grid, y_grid, z_grid, U_grid, V_grid, W_grid, ...
		x_grid, y_grid, z_grid, scale, VW_grid);
	set(h_windcone, 'EdgeColor', 'none')
	
	% Determine a target location based on energy and information estimate
	% from GP prediction
	[maxV, target_index] = max(VW_grid(:));
	info_target = [x_grid(target_index); y_grid(target_index); z_grid(target_index)];

	[max_lift, energy_index] = min(W_train(:,3));
	if max_lift < max_lift_old
		max_lift_old = max_lift;
		energy_target = [X_train(energy_index, [1,2])'; current_pos(3)-50];
	else
		energy_target(3) =  current_pos(3)-50;
	end


	% Energy altitude required to get to info point
	Einfo = (sqrt(sum((info_target(1:2)-current_pos(1:2)).^2))/GR_approx + current_pos(3) - info_target(3))*m*g ;
	
	target_pos = (Einfo >= 0)*energy_target + (Einfo<0)*info_target;
	
	% Update target positions in plot
	set(h_target, 'XData', target_pos(1), 'YData', target_pos(2), ...
		'ZData', target_pos(3));
	set(h_energy_target, 'XData', energy_target(1), 'YData', energy_target(2), ...
		'ZData', energy_target(3));
	set(h_info_target, 'XData', info_target(1), 'YData', info_target(2), ...
		'ZData', info_target(3));
	
	% Calculate path based on target location and estimated wind field
	W_estimate = @(X_test) GP_predict(X_train, W_train, X_test, cov_funs{1}, loghyper, Ki);
	J_estimate = @(X_test) dGP_predict(X_train, W_train, X_test, [1,2,3], cov_funs{3}, loghyper, Ki);
	
	[full_controls] = calculate_path_GP(current_pos, current_att, ...
		current_V, target_pos, W_estimate, J_estimate, t_plan, lookahead, dt, ntf);
	axis tight;
	
	if movie_on; M((i-1)*2 + 1) = getframe(h_fig, [0, 0, 640, 480]); end;
	
	% Execute the commands generated by the planner
	pos_path = pos_full(:,(i-1)*replan_points+1:i*replan_points);
	att_path = att_full(:,(i-1)*replan_points+1:i*replan_points);
	V_path = V_full(:,(i-1)*replan_points+1:i*replan_points);
	
	% Plot path and aircraft
	plot3(pos_path(1,:), pos_path(2,:), pos_path(3,:), 'k-');
	
	% New current position
	current_pos = pos_path(:,end);
	current_att = att_path(:,end);
	current_V = V_path(end);
	current_E = m*g*-current_pos(3) + 0.5*m*current_V.^2;
	
	% Create new observation set
	
	set(h_train, 'Xdata', X_train(:,1), 'YData', X_train(:,2), ...
		'ZData', X_train(:,3));	
	if movie_on; M((i-1)*2 + 2) = getframe(h_fig, [0, 0, 640, 480]); end;
	
	set(0, 'CurrentFigure', h_fig2);
	M2(i) = plot_variance(x_grid, y_grid, z_grid, VW_grid, [X_init', ...
		pos_full(:, 1:i*replan_points)], box_lims, info_target, 5);
	set(0, 'CurrentFigure', h_fig);

	n_obs = 50+3*(i); n_obs = min(n_obs, max_obs);
	X_train = X_train_full(1:n_obs, :, i);
	W_train = W_train_full(1:n_obs, :, i);
end

M(numel(M)+1) = getframe(h_fig, [0, 0, fig_width, fig_height]);
movie2avi(M, 'movies\soaring_REWRITE.avi', 'fps', 10, ...
'Compression','none')
movie2avi(M2, 'movies\soaring_REWRITE_isosurf.avi', 'fps', 10, ...
'Compression','none')

%%
figure(3); clf; hold on;
plot(t_full, Eks, 'b--', t_full, Eps, 'r-.');
hold on; plot(t_full, Et, 'Color', [0, .6, 0]);
xlabel('Time (s)');
ylabel('Energy Change, \DeltaE (J)'); grid on;
h_l = legend('Kinetic Energy', 'Potential Energy', 'Total Energy');
set(h_l, 'location', 'best');

%%
figure(4); clf;
plot(t0:replan:(n_replan-1)*replan, uncertainty, 'b-');
grid on;
xlabel('Time (s)'); ylabel('Field Variance (\Sigma \sigma_i^2)');
